library IEEE;
library WORK;

use IEEE.STD_LOGIC_1164.all;

use WORK.CPU_LIB.all;


entity CPU_ALL is
	
	generic 
	(
		DATA_WIDTH : NATURAL := 32;
		ADDR_WIDTH : NATURAL := 32
	);
	
	port(
		signal clk: in STD_LOGIC;
		signal reset : in STD_LOGIC;
		signal we : out STD_LOGIC;
		signal addr : out WORD_TYPE;
		signal data : inout WORD_TYPE
	);
end entity CPU_ALL;

--------------------------------------------------------------------------------

architecture STR of CPU_ALL is

	component IF_PHASE is
	    port(
		-- control
		clk: STD_LOGIC;
	    reset: STD_LOGIC;

		-- memory
		we : out STD_LOGIC;
		addr : out WORD_TYPE;
		data : inout WORD_TYPE;

		-- id phase
		pc : in REG_TYPE;
		new_pc : out REG_TYPE;
		instruction : out REG_TYPE
		);
	end component;

	component EX_PHASE is
		port(
			signal clk: STD_LOGIC;
	        signal reset: STD_LOGIC;

	         -- id phase
			instruction_type : INSTRUCTION_TYPE_TYPE;

			opcode: OPCODE_TYPE;
			cond: COND_TYPE;

			is_signed:  STD_LOGIC;
			load_store: STD_LOGIC;
			
			shift_operation: STD_LOGIC;
			shift_type: SHIFT_TYPE_TYPE;
			
			immidiate: REG_TYPE;

			Rn		: REG_TYPE;
			Rs		: REG_TYPE;
			Rm		: REG_TYPE;

			RdAddr : inout REG_ADDR_TYPE
		);
	end component;

	component ID_PHASE is
		port(
			-- controll
			clk: STD_LOGIC;
	        reset: STD_LOGIC;

	        -- if phase
	        new_pc : REG_TYPE;
	        instruction : REG_TYPE;
	        pc : out REG_TYPE;

	        -- ex phase
			instruction_type : out INSTRUCTION_TYPE_TYPE;

			opcode: out OPCODE_TYPE;
			cond: out COND_TYPE;

			is_signed: out STD_LOGIC;
			load_store: out STD_LOGIC;
			
			shift_operation: out STD_LOGIC;
			shift_type: out SHIFT_TYPE_TYPE;
			
			immidiate: out REG_TYPE;

			Rn		: out REG_TYPE;
			Rs		: out REG_TYPE;
			Rm		: out REG_TYPE;
			
			RdAddr : inout REG_ADDR_TYPE
		);
	end component;

	component MEM_PHASE is
		port(
			clk: STD_LOGIC;
	        reset: STD_LOGIC
		);
	end component;

	component WB_PHASE is
		port(
			signal clk: STD_LOGIC;
	        signal reset: STD_LOGIC
		);
	end component;

	signal new_pc : REG_TYPE;
	signal pc : REG_TYPE;
	signal instruction : REG_TYPE;

	signal instruction_type : INSTRUCTION_TYPE_TYPE;

	signal opcode: OPCODE_TYPE;
	signal cond: COND_TYPE;

	signal is_signed:  STD_LOGIC;
	signal load_store: STD_LOGIC;
		
	signal shift_operation: STD_LOGIC;
	signal shift_type: SHIFT_TYPE_TYPE;
		
	signal immidiate: REG_TYPE;

	signal Rn	: REG_TYPE;
	signal Rs	: REG_TYPE;
	signal Rm	: REG_TYPE;
	signal RdAddr : REG_ADDR_TYPE;

begin
	
	U_IF : IF_PHASE 	port map (
								clk => clk,					--in CPU_ALL.clk
								reset => reset,				--in CPU_ALL.clk
								
								we => we,					--out CPU_ALL.we
								addr => addr,				--out CPU_ALL.addr
								data => data,				--out CPU_ALL.data

								pc => pc,					--in ID_PHASE.pc
								new_pc => new_pc,			--out ID_PHASE.new_pc

								instruction => instruction	--out ID_PHASE.instruction


						  	);
	
	U_ID : ID_PHASE 	port map (
								clk => clk,								--in CPU_ALL.clk
								reset => reset,							--in CPU_ALL.clk

								pc => pc,								--out IF_PHASE.pc
								new_pc => new_pc,						--in IF_PHASE.new_pc

								instruction => instruction,				--in IF_PHASE.instruction

								instruction_type => instruction_type,	--out EX_PHASE.instruction_type
								opcode => opcode,						--out EX_PHASE.opcode
								cond => cond,							--out EX_PHASE.cond
								is_signed => is_signed,					--out EX_PHASE.is_signed
								load_store => load_store,				--out EX_PHASE.load_store
								shift_operation => shift_operation,		--out EX_PHASE.shift_operation
								shift_type => shift_type,				--out EX_PHASE.shift_type
								immidiate => immidiate,					--out EX_PHASE.immidiate


								Rn => Rn,								--out EX_PHASE.Rn
								Rs => Rs,								--out EX_PHASE.Rs
								Rm => Rm,								--out EX_PHASE.Rm

								RdAddr => RdAddr						--inout EX_PHASE.RdAddr
						  	);
	
	U_EX : EX_PHASE 	port map (
								clk => clk,
								reset => reset,

								instruction_type => instruction_type,	--in ID_PHASE.instruction_type
								opcode => opcode,						--in ID_PHASE.opcode
								cond => cond,							--in ID_PHASE.cond
								is_signed => is_signed,					--in ID_PHASE.is_signed
								load_store => load_store,				--in ID_PHASE.load_store
								shift_operation => shift_operation,		--in ID_PHASE.shift_operation
								shift_type => shift_type,				--in ID_PHASE.shift_type
								immidiate => immidiate,					--in ID_PHASE.immidiate
								
								Rn => Rn,								--in ID_PHASE.Rn
								Rs => Rs,								--in ID_PHASE.Rs
								Rm => Rm,								--in ID_PHASE.Rm

								
								RdAddr => RdAddr						--inout EX_PHASE.RdAddr
					      	);

	U_MEM : MEM_PHASE 	port map (
								clk => clk,
								reset => reset
							);
	
	U_WB : WB_PHASE 	port map (
								clk => clk,
								reset => reset
						  	);
	
end architecture STR;