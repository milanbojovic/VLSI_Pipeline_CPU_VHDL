library ieee;
library work;

use ieee.std_logic_1164.all;
use work.cpu_lib.all;

entity REG_EX is
	port(
		clk : std_logic;
		
		new_pc_if : REG_TYPE;
		
		instruction_type : INSTRUCTION_TYPE_TYPE;
		opcode: OPCODE_TYPE;
		cond: COND_TYPE;
		is_signed: STD_LOGIC;
		load_store: STD_LOGIC;
		shift_operation: STD_LOGIC;
		shift_type: SHIFT_TYPE_TYPE;
		immidiate: REG_TYPE;
		RdAddr : REG_ADDR_TYPE;
		
		Rn		: REG_TYPE;
		Rs		: REG_TYPE;
		Rm		: REG_TYPE
		
		new_pc_out : REG_TYPE;
		instruction_type_out : out INSTRUCTION_TYPE_TYPE;
		opcode_out: out OPCODE_TYPE;
		cond_out: out COND_TYPE;
		is_signed_out: out STD_LOGIC;
		load_store_out: out STD_LOGIC;
		shift_operation_out: out STD_LOGIC;
		shift_type_out: out SHIFT_TYPE_TYPE;
		immidiate_out: out REG_TYPE;
		RdAddr_out : inout REG_ADDR_TYPE;
		
		Rn_out		: out REG_TYPE;
		Rs_out		: out REG_TYPE;
		Rm_out		: out REG_TYPE
	);
end entity REG_EX;

architecture BHV of REG_EX is
begin
	process(clk) is
	begin
		if(rising_edge(clk)) then
			new_pc_out <= new_pc_if;
			instruction_type_out <= instruction_type;
			opcode_out <= opcode;
			cond_out <= cond;
			is_signed_out <= is_signed;
			load_store_out <= load_store;
			shift_operation_out <= shift_operation;
			shift_type_out <= shift_type;
			immidiate_out <= immidiate;
			RdAddr_out <= Rdaddr;
		
			Rn_out <= Rn;
			Rs_out <= Rs;
			Rm_out <= Rm;
			
		end if;
	end;
end architecture;