-- Quartus II VHDL Template
-- True Dual-Port RAM with single clock
--
-- Read-during-write on port A or B returns newly written data
-- 
-- Read-during-write between A and B returns either new or old data depending
-- on the order in which the simulator executes the process statements.
-- Quartus II will consider this read-during-write scenario as a 
-- don't care condition to optimize the performance of the RAM.  If you
-- need a read-during-write between ports to return the old data, you
-- must instantiate the altsyncram Megafunction directly.

library ieee;
use ieee.STD_LOGIC_1164.all;

entity REGISTERS is

	generic 
	(
		DATA_WIDTH : NATURAL := 32;
		ADDR_WIDTH : NATURAL := 6
	);

	port 
	(
		clk		: STD_LOGIC;
		addr_a	: NATURAL range 0 to 2**ADDR_WIDTH - 1;
		addr_b	: NATURAL range 0 to 2**ADDR_WIDTH - 1;
		data_a	: STD_LOGIC_VECTOR((DATA_WIDTH-1) downto 0);
		data_b	: STD_LOGIC_VECTOR((DATA_WIDTH-1) downto 0);
		we_a	: STD_LOGIC := '1';
		we_b	: STD_LOGIC := '1';
		
		q_a		: out STD_LOGIC_VECTOR((DATA_WIDTH -1) downto 0);
		q_b		: out STD_LOGIC_VECTOR((DATA_WIDTH -1) downto 0)
	);

end REGISTERS;

architecture RTL of REGISTERS is

	-- Build a 2-D array type for the RAM
	subtype word_t is STD_LOGIC_VECTOR((DATA_WIDTH-1) downto 0);
	type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

	-- Declare the RAM 
	shared variable ram : memory_t;

begin


	-- Port A
	process(clk)
	begin
	if(rising_edge(clk)) then 
		if(we_a = '1') then
			ram(addr_a) := data_a;
		end if;
		q_a <= ram(addr_a);
	end if;
	end process;

	-- Port B 
	process(clk)
	begin
	if(rising_edge(clk)) then 
		if(we_b = '1') then
			ram(addr_b) := data_b;
		end if;
  	    q_b <= ram(addr_b);
	end if;
	end process;

end RTL;
